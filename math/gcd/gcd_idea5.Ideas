An alternative method of computing the gcd is the binary gcd method which uses only subtraction and division by 2. In outline the method is as follows: Let a and b be the two non negative integers. Also set the integer d to 0. There are five possibilities:

a = b.
As gcd(a, a) = a, the desired gcd is a×2d (as a and b are changed in the other cases, and d records the number of times that a and b have been both divided by 2 in the next step, the gcd of the initial pair is the product of a by 2d).

Both a and b are even.
In this case 2 is a common divisor. Divide both a and b by 2, increment d by 1 to record the number of times 2 is a common divisor and continue.

a is even and b is odd.
In this case 2 is not a common divisor. Divide a by 2 and continue.

a is odd and b is even.
As in the previous case 2 is not a common divisor. Divide b by 2 and continue.

Both a and b are odd.
As gcd(a,b) = gcd(b,a) and we have already considered the case a = b, we may assume that a > b. The number c = a − b is smaller than a yet still positive. Any number that divides a and b must also divide c so every common divisor of a and b is also a common divisor of b and c Similarly, a = b + c and every common divisor of b and c is also a common divisor of a and b. So the two pairs (a, b) and (b, c) have the same common divisors, and thus gcd(a,b) = gcd(b,c). Moreover, as a and b are both odd, c is even, and one may replace c by c/2 without changing the gcd. Thus the process can be continued with the pair (a, b) replaced by the smaller numbers (c/2, b).

Each of the above steps reduces at least one of a and b towards 0 and so can only be repeated a finite number of times. Thus one must eventually reach the case a = b, which is the only stopping case. Then, as quoted above, the gcd is a×2d.

This algorithm may easily programmed as follows:

Input: a, b positive integers
Output: g and d such that g is odd and gcd(a, b) = g×2d
    d := 0
    while a and b are both even do
        a := a/2
        b := b/2
        d := d + 1
    while a ≠ b do
        if a is even then a := a/2
        else if b is even then b := b/2
        else if a > b then a := (a – b)/2
        else b := (b – a)/2
    g := a
    output g, d
Example: (a, b, d) = (48, 18, 0) → (24, 9, 1) → (12, 9, 1) → (6, 9, 1) → (3, 9, 1) → (3, 6, 1) → (3, 3, 1) ; the original gcd is thus 2d = 21 times a= b= 3, that is 6.

The Binary GCD algorithm is particularly easy to implement on binary computers. The test for whether a number is divisible by two can be performed by testing the lowest bit in the number. Division by two can be achieved by shifting the input number by one bit. Each step of the algorithm makes at least one such shift. Subtracting two numbers smaller than a and b costs O(\log a+\log b) bit operations. Each step makes at most one such subtraction. The total number of steps is at most the sum of the numbers of bits of a and b, hence the computational complexity is

O((\log a + \log b)^2).
