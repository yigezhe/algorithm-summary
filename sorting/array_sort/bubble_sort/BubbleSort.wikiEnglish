（阅读方法还是第一遍猜，第二遍找一些重点词汇查一下就可以！)
Bubble sort
From Wikipedia, the free encyclopedia
Bubble sort Static visualization of bubblesort
Class 	Sorting algorithm
Data structure 	Array
Worst case performance 	O(n^2)
Best case performance 	O(n)
Average case performance 	O(n^2)
Worst case space complexity 	O(1) auxiliary

Bubble sort, sometimes referred to as sinking sort,(下沉的排序） is a simple sorting algorithm that works by repeatedly stepping through the list to be sorted, comparing each pair of adjacent items and swapping them if they are in the wrong order. The pass through the list is repeated until no swaps are needed, which indicates that the list is sorted. The algorithm gets its name from the way smaller elements "bubble" to the top of the list. Because it only uses comparisons to operate on elements, it is a comparison sort. Although the algorithm is simple, it is typically too slow for practical use, even compared to insertion sort.[1]

Contents

    1 Analysis
        1.1 Performance
        1.2 Rabbits and turtles
        1.3 Step-by-step example
    2 Implementation
        2.1 Pseudocode implementation
        2.2 Optimizing bubble sort
    3 In practice
    4 Variations
        4.1 Alone bubble sort
    5 Debate over name
    6 Notes
    7 References
    8 External links

Analysis
An example of bubble sort. Starting from the beginning of the list, compare every adjacent pair, swap their position if they are not in the right order (the latter one is smaller than the former one). After each iteration, one less element (the last one) is needed to be compared until there are no more elements left to be compared.
Performance

Bubble sort has worst-case and average complexity both О(n2), where n is the number of items being sorted. There exist many sorting algorithms with substantially better worst-case or average complexity of O(n log n). Even other О(n2) sorting algorithms, such as insertion sort, tend to have better performance than bubble sort. Therefore, bubble sort is not a practical sorting algorithm when n is large.

The only significant advantage that bubble sort has over most other implementations, even quicksort, but not insertion sort, is that the ability to detect that the list is sorted is efficiently built into the algorithm. When the list is already sorted (best-case), the complexity of bubble sort is only O(n). By contrast, most other algorithms, even those with better average-case complexity, perform their entire sorting process on the set and thus are more complex. However, not only does insertion sort have this mechanism too, but it also performs better on a list that is substantially sorted (having a small number of inversions).
(就是说用冒泡排序检测一个数组是不是排好了，是非常快捷的）２３

Bubble sort should be avoided in the case of large collections. It will not be efficient in the case of a reverse-ordered collection.
Rabbits and turtles

The positions of the elements in bubble sort will play a large part in determining its performance. Large elements at the beginning of the list do not pose a problem, as they are quickly swapped. Small elements towards the end, however, move to the beginning extremely slowly. This has led to these types of elements being named rabbits and turtles, respectively.

Various efforts have been made to eliminate turtles to improve upon the speed of bubble sort. Cocktail sort is a bi-directional bubble sort that goes from beginning to end, and then reverses itself, going end to beginning. It can move turtles fairly well, but it retains O(n2) worst-case complexity. Comb sort compares elements separated by large gaps, and can move turtles extremely quickly before proceeding to smaller and smaller gaps to smooth out the list. Its average speed is comparable to faster algorithms like quicksort.
Step-by-step example

龟兔赛跑，在数组前面的大数是兔子，在数组后面的小数就是乌龟！大数将以非常快的速度被换到后面，可是小书将以非常慢的速度换到前面！

Let us take the array of numbers "5 1 4 2 8", and sort the array from lowest number to greatest number using bubble sort. In each step, elements written in bold are being compared. Three passes will be required.

First Pass:
( 5 1 4 2 8 ) \to ( 1 5 4 2 8 ), Here, algorithm compares the first two elements, and swaps since 5 > 1.
( 1 5 4 2 8 ) \to ( 1 4 5 2 8 ), Swap since 5 > 4
( 1 4 5 2 8 ) \to ( 1 4 2 5 8 ), Swap since 5 > 2
( 1 4 2 5 8 ) \to ( 1 4 2 5 8 ), Now, since these elements are already in order (8 > 5), algorithm does not swap them.
Second Pass:
( 1 4 2 5 8 ) \to ( 1 4 2 5 8 )
( 1 4 2 5 8 ) \to ( 1 2 4 5 8 ), Swap since 4 > 2
( 1 2 4 5 8 ) \to ( 1 2 4 5 8 )
( 1 2 4 5 8 ) \to ( 1 2 4 5 8 )
Now, the array is already sorted, but our algorithm does not know if it is completed. The algorithm needs one whole pass without any swap to know it is sorted.
Third Pass:
( 1 2 4 5 8 ) \to ( 1 2 4 5 8 )
( 1 2 4 5 8 ) \to ( 1 2 4 5 8 )
( 1 2 4 5 8 ) \to ( 1 2 4 5 8 )
( 1 2 4 5 8 ) \to ( 1 2 4 5 8 )
Implementation
Pseudocode implementation

The algorithm can be expressed as (0-based array):

procedure bubbleSort( A : list of sortable items )
   n = length(A)
   repeat 
     swapped = false
     for i = 1 to n-1 inclusive do
       /* if this pair is out of order */
       if A[i-1] > A[i] then
         /* swap them and remember something changed */
         swap( A[i-1], A[i] )
         swapped = true
       end if
     end for
   until not swapped
end procedure

Optimizing bubble sort

The bubble sort algorithm can be easily optimized by observing that the n-th pass finds the n-th largest element and puts it into its final place. So, the inner loop can avoid looking at the last n-1 items when running for the n-th time:

procedure bubbleSort( A : list of sortable items )
    n = length(A)
    repeat
       swapped = false
       for i = 1 to n-1 inclusive do
          if A[i-1] > A[i] then
             swap(A[i-1], A[i])
             swapped = true
          end if
       end for
       n = n - 1
    until not swapped
end procedure

More generally, it can happen that more than one element is placed in their final position on a single pass. In particular, after every pass, all elements after the last swap are sorted, and do not need to be checked again. This allows us to skip over a lot of the elements, resulting in about a worst case 50% improvement in comparison count (though no improvement in swap counts), and adds very little complexity because the new code subsumes the "swapped" variable:

To accomplish this in pseudocode we write the following:

procedure bubbleSort( A : list of sortable items )
    n = length(A)
    repeat
       newn = 0
       for i = 1 to n-1 inclusive do
          if A[i-1] > A[i] then
             swap(A[i-1], A[i])
             newn = i
          end if
       end for
       n = newn
    until n = 0
end procedure

Alternate modifications, such as the cocktail shaker sort attempt to improve on the bubble sort performance while keeping the same idea of repeatedly comparing and swapping adjacent items.
In practice
A bubble sort, a sorting algorithm that continuously steps through a list, swapping items until they appear in the correct order. The list was plotted in a Cartesian coordinate system, with each point (x,y) indicating that the value y is stored at index x. Then the list would be sorted by Bubble sort according to every pixel's value. Note that the largest end gets sorted first, with smaller elements taking longer to move to their correct positions.

Although bubble sort is one of the simplest sorting algorithms to understand and implement, its O(n2) complexity means that its efficiency decreases dramatically on lists of more than a small number of elements. Even among simple O(n2) sorting algorithms, algorithms like insertion sort are usually considerably more efficient.

(每一种算法都有其价值，冒泡算法的简单本身就是其价值，另外对于冒泡算法的改进，就是充满想象力的创造，能够很好地训练思维，提高算法改进能力！
在教学中完全不介绍冒泡排序是不好的，算法效率是重要的，但是现在计算机运算速度非常高，不行，也可以在超级计算机上运转，所以，效率不是问题！）


Due to its simplicity, bubble sort is often used to introduce the concept of an algorithm, or a sorting algorithm, to introductory computer science students. However, some researchers such as Owen Astrachan have gone to great lengths to disparage bubble sort and its continued popularity in computer science education, recommending that it no longer even be taught.[2]

The Jargon File, which famously calls bogosort "the archetypical [sic] perversely awful algorithm", also calls bubble sort "the generic bad algorithm".[3] Donald Knuth, in his famous book The Art of Computer Programming, concluded that "the bubble sort seems to have nothing to recommend it, except a catchy name and the fact that it leads to some interesting theoretical problems", some of which he then discusses.[1]

Bubble sort is asymptotically equivalent in running time to insertion sort in the worst case, but the two algorithms differ greatly in the number of swaps necessary. Experimental results such as those of Astrachan have also shown that insertion sort performs considerably better even on random lists. For these reasons many modern algorithm textbooks avoid using the bubble sort algorithm in favor of insertion sort.

Bubble sort also interacts poorly with modern CPU hardware. It requires at least twice as many writes as insertion sort, twice as many cache misses, and asymptotically more branch mispredictions. Experiments by Astrachan sorting strings in Java show bubble sort to be roughly one-fifth as fast an insertion sort and 70% as fast as a selection sort.[2]

In computer graphics it is popular for its capability to detect a very small error (like swap of just two elements) in almost-sorted arrays and fix it with just linear complexity (2n). For example, it is used in a polygon filling algorithm, where bounding lines are sorted by their x coordinate at a specific scan line (a line parallel to x axis) and with incrementing y their order changes (two elements are swapped) only at intersections of two lines. Bubble sort is a stable sort algorithm, like insertion sort.
Variations

(我可以看懂这个图表显示的内容了，m=f(n),排序好之后是ｉ＝f(i)
    Odd-even sort is a parallel version of bubble sort, for message passing systems.
    Cocktail sort is another parallel version of the bubble sort
    In some cases, the sort works from right to left (the opposite direction), which is more appropriate for partially sorted lists, or lists with unsorted items added to the end.

Alone bubble sort

Alone bubble sort is a 1992 modification[citation needed] of the simple bubble sorting algorithm. Unlike the normal bubble sort where the loop resets after every performed swap of elements, in the alone bubble sort, the loop index only returns back by one step thus allowing the swapping to continue until a smaller value element in the array is reached. The following is the alone bubble realization (the algorithm only) in Pascal:

    f:=false;
    for x:=1 to max-1 do
        if a[x]>a[x+1] then
            begin
                if f=false then d:=x;
                f:=true;
                t:=a[x];
                a[x]:=a[x+1];
                a[x+1]:=t;
                if x>1 then dec(x,2) else x:=0;
            end
        else
            if f=true then
                begin
                    x:=d;
                    f:=false;
                end;

Debate over name

Bubble sort has been occasionally referred to as a "sinking sort".[4]

For example, in Donald Knuth's The Art of Computer Programming, Volume 3: Sorting and Searching he states in section 5.2.1 'Sorting by Insertion', that [the value] "settles to its proper level" this method of sorting has often been called the sifting or sinking technique.[clarification needed] Furthermore the larger values might be regarded as heavier and therefore be seen to progressively sink to the bottom of the list.
Notes

    Donald Knuth. The Art of Computer Programming, Volume 3: Sorting and Searching, Second Edition. Addison-Wesley, 1998. ISBN 0-201-89685-0. Pages 106–110 of section 5.2.2: Sorting by Exchanging. "[A]lthough the techniques used in the calculations [to analyze the bubble sort] are instructive, the results are disappointing since they tell us that the bubble sort isn't really very good at all. Compared to straight insertion [...], bubble sorting requires a more complicated program and takes about twice as long!" (Quote from the first edition, 1973.)
    Owen Astrachan. Bubble Sort: An Archaeological Algorithmic Analysis. SIGCSE 2003 Hannan Akhtar . (pdf)
    http://www.jargon.net/jargonfile/b/bogo-sort.html
    Black, Paul E. (24 August 2009). "bubble sort". Dictionary of Algorithms and Data Structures. National Institute of Standards and Technology. Retrieved 1 October 2014.

References

    Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, and Clifford Stein. Introduction to Algorithms, Second Edition. MIT Press and McGraw-Hill, 2001. ISBN 0-262-03293-7. Problem 2-2, pg.40.
    Sorting in the Presence of Branch Prediction and Caches
    Fundamentals of Data Structures by Ellis Horowitz, Sartaj Sahni and Susan Anderson-Freed ISBN 81-7371-605-6

External links
	The Wikibook Algorithm implementation has a page on the topic of: Bubble sort
	Wikimedia Commons has media related to Bubble sort.
	Wikiversity has learning materials about Bubble sort

    David R. Martin. "Animated Sorting Algorithms: Bubble Sort". – graphical demonstration and discussion of bubble sort
    "Lafore's Bubble Sort". (Java applet animation)
    (sequence A008302 in OEIS) Table (statistics) of the number of permutations of [n] that need k pair-swaps during the sorting.

[hide]

    v
    t
    e

Sorting algorithms
Theory 	

    Computational complexity theory
    Big O notation
    Total order
    Lists
    Inplacement
    Stability
    Comparison sort
    Adaptive sort
    Sorting network
    Integer sorting

Exchange sorts 	

    Bubble sort
    Cocktail sort
    Odd–even sort
    Comb sort
    Gnome sort
    Quicksort
    Stooge sort
    Bogosort

Selection sorts 	

    Selection sort
    Heapsort
    Smoothsort
    Cartesian tree sort
    Tournament sort
    Cycle sort

Insertion sorts 	

    Insertion sort
    Shellsort
    Splaysort
    Tree sort
    Library sort
    Patience sorting

Merge sorts 	

    Merge sort
    Cascade merge sort
    Oscillating merge sort
    Polyphase merge sort
    Strand sort

Distribution sorts 	

    American flag sort
    Bead sort
    Bucket sort
    Burstsort
    Counting sort
    Pigeonhole sort
    Proxmap sort
    Radix sort
    Flashsort

Concurrent sorts 	

    Bitonic sorter
    Batcher odd–even mergesort
    Pairwise sorting network

Hybrid sorts 	

    Block sort
    Timsort
    Introsort
    Spreadsort
    JSort

Other 	

    Topological sorting
    Pancake sorting
    Spaghetti sort

Categories:

    Sorting algorithms
    Comparison sorts
    Stable sorts

Navigation menu

    意歌哲
    0
    Talk
    Sandbox
    Preferences
    Beta
    Watchlist
    Contributions
    Log out

    Article
    Talk

    Read
    Edit
    View history
    Watch

    Main page
    Contents
    Featured content
    Current events
    Random article
    Donate to Wikipedia
    Wikimedia Shop

Interaction

    Help
    About Wikipedia
    Community portal
    Recent changes
    Contact page

Tools

    What links here
    Related changes
    Upload file
    Special pages
    Permanent link
    Page information
    Wikidata item
    Cite this page

Print/export

    Create a book
    Download as PDF
    Printable version

Languages

    العربية
    Azərbaycanca
    Български
    Català
    Čeština
    Dansk
    Deutsch
    Eesti
    Ελληνικά
    Español
    فارسی
    Français
    한국어
    Հայերեն
    Íslenska
    Italiano
    עברית
    Қазақша
    Kurdî
    Lëtzebuergesch
    Lietuvių
    Magyar
    മലയാളം
    Nederlands
    日本語
    Norsk bokmål
    Polski
    Português
    Русский
    Simple English
    Slovenčina
    Slovenščina
    Српски / srpski
    Suomi
    Svenska
    Tagalog
    ไทย
    Türkçe
    Українська
    Tiếng Việt
    中文

Edit links

    This page was last modified on 10 December 2014 at 03:24.
    Text is available under the Creative Commons Attribution-ShareAlike License; additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization.

    Privacy policy
    About Wikipedia
    Disclaimers
    Contact Wikipedia
    Developers
    Mobile view

    Wikimedia Foundation
    Powered by MediaWiki


bubble sort的改进有cocktail sort和comb sort
odd-even sort
quicksort
insertion sort
selection sort

我还是觉得阅读英文版，收获比较大，中文版其实都可以忽略不看！
接下来的工作应该是阅读ｂｕｂｂｌｅｓｏｒｔ的各种改进算法！才算对ｂｕｂｂｌｅ　ｓｏｒｔ有了一个全貌的了解！
